html
{
	overflow-x: hidden;
}

#content :not( pre ) > code
{
	--code-line-radii: calc(var(--page-thin-space) * 2);
	--code-line-sides: var(--page-thin-space);
	border-left: var(--code-line-sides) solid var(--code-area-color);
	border-radius: var(--code-line-radii);
	border-right: var(--code-line-sides) solid var(--code-area-color);
	box-shadow: 0 0 1px 1px var(--code-area-color);
	margin-left: calc(var(--code-line-sides) * -1);
	margin-right: calc(var(--code-line-sides) * -1);
	width: fit-content;
}

#content code
{
	background: var(--code-area-color);
	color: var(--code-text-color);
	font-family: monospace;
}

#content pre > code
{
	/*
	Variable Descriptors ( --code-snip-ample ):
	  - Max width of page content
	  - Boarder around page block
	  - Padding around code block
	  - Boarder around code block
	  - Boarder around page block
	*/
	--code-snip-ample: calc( ( ( var(--page-full-width) ) + ( var(--boarder-breadth) * 2 ) )
	- ( ( var(--page-edge-space) * 2 ) + ( var(--boarder-breadth) * 2 ) + ( var(--boarder-breadth) * 2 ) ));
	/*
	Variable Description ( --code-snip-sides ):
	Here we want the margin of a code block to be either:
	  -  0 px --> vw >= --page-full-width
	  - -N px --> vw == --page-full-width - N / 2
	  - -X px --> vw <= --page-full-width - 2 * var(--boarder-breadth)
	This causes the border of the code block to merge with the border of the page body
	*/
	--code-snip-sides: clamp( calc( var(--boarder-breadth) * -1 )
	, calc( ( var(--view-port-width) - var(--page-full-width) - (var(--boarder-breadth) * 2) ) / 2 )
	, 0px);
	/*
	Variable Descriptors ( --code-snip-trunk ):
	  - Screen size
	  - Padding around code block
	  - Boarder around code block
	*/
	--code-snip-trunk: calc( var(--view-port-width) - ( var(--page-edge-space) * 2 ) - ( var(--boarder-breadth) * 2 ) );
	/*
	This calculation subtracts the border and padding widths
	from the viewport width to ensure that the code block
	never exceeds the width of the viewport.

	This is very important as failing to do so it will cause
	the page body to exceed the viewport width and break many
	of the beautiful flex rendering functionalities.
	*/
	--code-snip-width: min( var(--code-snip-ample), var(--code-snip-trunk) );
	border: var(--boarder-caliber);
	display: block;
	margin-left: var(--code-snip-sides);
	margin-right: var(--code-snip-sides);
	overflow-x: auto;
	padding: var(--page-edge-space);
	width: var(--code-snip-width);
}

#post-front-matter
{
	display: flex;
	flex-wrap: wrap;
}

#post-front-matter #format-list-container
{
	margin-left: -4px;
}

#post-front-matter > .post-hash
{
	display: flex;
	flex-grow: 1;
	justify-content: center;
	margin-bottom: var(--page-edge-space);
	margin-top: var(--page-edge-space);
	min-width: 0;
	padding-left: var(--page-edge-space);
	padding-right: var(--page-edge-space);
}

#post-front-matter > .post-description
{
	margin-bottom: var(--page-edge-space);
	margin-top: var(--page-edge-space);
}

#post-front-matter > .post-description > dl
{
	display: flex;
	flex-direction: column;
	margin: 0;
	min-width: 0;
}

#post-front-matter > .post-description > dl > span
{
	display: flex;
	flex: 1;
	flex-direction: row;
	height: var(--metadata-height);
	line-height: var(--metadata-height);
	min-width: 0;
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

#post-front-matter > .post-description > dl > span > dd
{
	flex-grow: 1;
	height: var(--metadata-height);
	line-height: var(--metadata-height);
	margin: 0;
	/*
	Variable Descriptors ( max-width ):
	  - Screen size
	  - Width of the "dt" descriptor
	  - Padding surrounding "dt" & "dd"
	  - Width of the colored boarders
	*/
	max-width: calc( var(--view-port-width)
	- var(--metadata-spread)
	- ( var(--page-edge-space) * 4 )
	- ( var(--boarder-breadth) * 2 ));
	min-width: 0;
	overflow: hidden;
	padding-right: var(--page-edge-space);
	text-align: left;
	text-overflow: ellipsis;
	white-space: nowrap;
}

#post-front-matter > .post-description > dl > span > dt
{
	height: var(--metadata-height);
	line-height: var(--metadata-height);
	padding-left: var(--page-edge-space);
	padding-right: calc(var(--page-edge-space) * 2);
	text-align: left;
	width: var(--metadata-spread);
}

#post-front-matter > div
{
	flex-grow: 100;
	min-width: 0;
}

#post-front-matter > div > ol
{
	list-style: none;
	margin: 0;
	padding: 0;
}

#post-front-matter > div > ol > li
{
	height: var(--metadata-height);
	line-height: var(--metadata-height);
	text-align: left;
	width: 200px;
	word-spacing: -7px;
}

#post-front-matter ~ h1:first-of-type
{
	margin-top: var(--page-edge-space);
}

#post-text-matter :not( :is( h1, h2, h3, h4, h5, h6 ) ) + :is( h1, h2, h3, h4, h5, h6 )::before
{
	/* Insert "asterism" separators between sections within exposition */
	content: '⁂';
	display: block;
	font-size: var(--page-font-huge);
	font-weight: bold;
	margin-bottom: var(--page-wide-space);
	margin-top: var(--page-wide-space);
	padding-left: var(--page-edge-space);
	padding-right: var(--page-edge-space);
	text-align: center;
}


#post-text-matter dd
{
	grid-column-start: 2;
	margin-right: var(--page-edge-space);
}

#post-text-matter dd,
#post-text-matter dt
{
	display: inline-flex;
	margin-left: var(--page-edge-space);
	padding-left: 0;
	padding-right: 0;
}

#post-text-matter dd::before
{
	content: '❱❭';
	margin-right: var(--page-edge-space);
}

#post-text-matter dl
{
	display: grid;
	grid-template-columns: max-content auto;
	margin: calc(var(--page-edge-space));
}

#post-text-matter dt
{
	grid-column-start: 1;
}

#post-text-matter dt::before
{
	content: '━';
	margin-right: var(--page-edge-space);
}

#post-text-matter figcaption
{
	font-size: var(--page-font-small);
	margin-block-end: var(--page-edge-space);
	margin-block-start: var(--page-edge-space);
	text-align: center;
}

#post-text-matter img
{
	margin-block-end: var(--page-edge-space);
	margin-block-start: var(--page-edge-space);
	max-width: calc(var(--page-full-width) - (var(--page-edge-space)*2) );
}

#post-text-matter ol
{
	margin: var(--page-wide-space);
	padding-left: var(--page-wide-space);
	padding-right: var(--page-wide-space);
}

#post-text-matter table
{
	border-collapse: collapse;
	margin-left: auto;
	margin-right: auto;
}

#post-text-matter tbody > tr:first-child > td
{
	padding-block-start: var(--page-list-space);
}

#post-text-matter td,
#post-text-matter th
{
	padding-bottom: var(--page-thin-space);
	padding-left: var(--page-list-space);
	padding-right: var(--page-list-space);
	padding-top: var(--page-thin-space);
}

#post-text-matter thead
{
	border-bottom-style: solid;
	border-bottom-width: ver(--boarder-breadth);
}

#post-text-matter thead > tr:last-child > th
{
	padding-block-end: var(--page-list-space);
}

#post-text-matter::after
{
	/* Insert "editorial coronis" at end of exposition */
	content: '⸎';
	display: block;
	font-size: calc(var(--page-font-giant)*(6/5));
	margin-bottom: calc(var(--page-edge-space) + var(--page-wide-space));
	margin-top: var(--page-huge-space);
	padding-left: var(--page-edge-space);
	padding-right: var(--page-edge-space);
	text-align: center;
}
