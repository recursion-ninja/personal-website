################################################################################
### GitHub Actions curation providing quality assurance for Haskell projects 
###
name: 'Haskell Quality Assurance CI'


################################################################################
### Actions Configuration
###
defaults:
  run:
    shell: bash

on:
  # Build every pull request, to check for regressions.
  pull_request:

  # Build when a PR is merged, to update the README's CI badge.
  push:
#    branches: [master]


################################################################################
### Actions: Curation
###
jobs:


################################################################################
### Cabal build matrix
###
  cabal:
    env:
      PROJECT_FILE: --project-file=config/cabal.project.CI
      WITH_GHC_VER:  --with-compiler=ghc-${{ matrix.ghc }}

    name: GHC-${{ matrix.ghc }}
    
    runs-on:  ${{ matrix.os  }}
    
    strategy:

      fail-fast: false

      # NOTE:
      #   Do *not* include macOS in *any* benchmarking/testing build matrix!
      #   Only include macOS in build matrices checking for compilation success.
      #     - macOS consumes x10 the free Linux CI minutes
      #     - macOS bills at x10 the paid Linux CI minute rate
      #
      matrix:
        ghc:   [ '8.10', '9.0', '9.2' ]
        cabal: [ 'latest' ]
        os:    [ ubuntu-latest ]

    steps:
      - name: 'Clone Project'
        uses: actions/checkout@v3
      
      - name: 'Setup Haskell'
        uses: haskell/actions/setup@v2
        with:
          ghc-version:   ${{ matrix.ghc   }}
          cabal-version: ${{ matrix.cabal }}

      - name: Versions
        run: |
          cabal --version
          ghc   --version

      - name: 'Cabal - Initalize'
        run: |
          cabal update
          cabal clean

      - name: 'Cabal - Configure'
        run: |
          cabal configure $PROJECT_FILE $WITH_GHC_VER

      - name: 'Cabal - Freeze'
        run: |
          cabal freeze $PROJECT_FILE
          ls config

      - name: 'Cabal - Cache'
        uses: actions/cache@v3
        with:
          path: |
            ~/.cabal/store
            dist-newstyle
          key: ${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('**/*.freeze') }}
          # restore keys is a fall back when the freeze plan is different
          restore-keys: |
            ${{ runner.os }}-${{ matrix.ghc }}-

      - name: 'Cabal - Build package dependencies'
        run: |
          cabal build all ${PROJECT_FILE} --only-dependencies

      - name: 'Cabal - Build package targets'
        run: |
          cabal build all ${PROJECT_FILE}

      - name: 'Cabal - Check'
        run: |
          cabal check ${PROJECT_FILE} || true
          cabal sdist ${PROJECT_FILE} -o `pwd`


################################################################################
### Check that the project builds with the specified lower bounds
###
  build-min-bounds:
    env:
      PROJECT_FILE: --project-file=config/cabal.project.oldest

    name: 'Check: Cabal lower bounds'

    runs-on: ubuntu-latest

    steps:
      - name: 'Clone Project'
        uses: actions/checkout@v3

      - name: 'Setup Haskell'
        uses: haskell/actions/setup@v2
        with:
          ghc-version:   8.10
          cabal-version: 3.6

      - name: Versions
        run: |
          cabal --version
          ghc   --version

      - name: 'Cabal - Initalize'
        run: |
          cabal update
          cabal clean

      - name: 'Cabal - Configure'
        run: |
          cabal configure $PROJECT_FILE

      - name: 'Cabal - Freeze'
        run: |
          cabal freeze $PROJECT_FILE

      - name: 'Cabal - Cache'
        uses: actions/cache@v3
        with:
          path: |
            ~/.cabal/store
            dist-newstyle
          key: ${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('**/*.freeze') }}
          # restore keys is a fall back when the freeze plan is different
          restore-keys: |
            ${{ runner.os }}-${{ matrix.ghc }}-

      - name: 'Cabal - Build package dependencies'
        run: |
          cabal build all ${PROJECT_FILE} --only-dependencies

      - name: 'Cabal - Build package targets'
        run: |
          cabal build all ${PROJECT_FILE}

      - name: 'Cabal - Check'
        run: |
          cabal check ${PROJECT_FILE} || true
          cabal sdist ${PROJECT_FILE} -o `pwd`


################################################################################
### Check that all HLint hints are applied
###
  hlint:
    name: 'Check: HLint'

    needs: build-min-bounds

    runs-on: ubuntu-latest
    
    steps:
      - name: 'Clone Project'
        uses: actions/checkout@v3

      - name: 'Set up HLint'
        uses: haskell/actions/hlint-setup@v2
        with:
          version: '3.4'

      - name: 'Run HLint'
        uses: haskell/actions/hlint-run@v2
        with:
          path: '[ "src/" ]' 
          fail-on: warning


################################################################################
### Check for spelling errors
###
  spelling:
    name: 'Check: Spelling'
    
    outputs:
      followup: ${{ steps.spelling.outputs.followup }}

    permissions:
      actions:       read
      contents:      read
      pull-requests: read

    runs-on: ubuntu-latest

    steps:
    - name: check-spelling
      id: spelling
      uses: check-spelling/check-spelling@prerelease
      with:
        experimental_apply_changes_via_bot: 1
        suppress_push_for_open_pull_request: 1
        checkout: true
        spell_check_this: check-spelling/spell-check-this@prerelease
        post_comment: 0
        extra_dictionary_limit: 32
        extra_dictionaries:
          cspell:css/css.txt
          cspell:filetypes/filetypes.txt
          cspell:fullstack/fullstack.txt
          cspell:html/html.txt
          cspell:haskell/haskell.txt
          cspell:latex/latex.txt
          cspell:html-symbol-entities/entities.txt
          cspell:software-terms/softwareTerms.txt
          cspell:scientific_terms_US/custom_scientific_US.dic.txt
